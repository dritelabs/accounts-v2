// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dritelabs/accounts/internal/database/models"
)

func newApproval(db *gorm.DB, opts ...gen.DOOption) approval {
	_approval := approval{}

	_approval.approvalDo.UseDB(db, opts...)
	_approval.approvalDo.UseModel(&models.Approval{})

	tableName := _approval.approvalDo.TableName()
	_approval.ALL = field.NewAsterisk(tableName)
	_approval.ID = field.NewField(tableName, "id")
	_approval.CreatedAt = field.NewTime(tableName, "created_at")
	_approval.UpdatedAt = field.NewTime(tableName, "updated_at")
	_approval.DeletedAt = field.NewField(tableName, "deleted_at")
	_approval.ClientID = field.NewField(tableName, "client_id")
	_approval.UserID = field.NewField(tableName, "user_id")
	_approval.Scopes = approvalManyToManyScopes{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Scopes", "models.Scope"),
		Approvals: struct {
			field.RelationField
			Scopes struct {
				field.RelationField
			}
			Clients struct {
				field.RelationField
				User struct {
					field.RelationField
					DefaultShippingAddress struct {
						field.RelationField
						User struct {
							field.RelationField
						}
					}
					DefaultBillingAddress struct {
						field.RelationField
					}
					Profile struct {
						field.RelationField
						User struct {
							field.RelationField
						}
					}
					Addresses struct {
						field.RelationField
					}
					Clients struct {
						field.RelationField
					}
					Approvals struct {
						field.RelationField
					}
				}
				Approvals struct {
					field.RelationField
				}
				Scopes struct {
					field.RelationField
				}
			}
			Users struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Scopes.Approvals", "models.Approval"),
			Scopes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Scopes.Approvals.Scopes", "models.Scope"),
			},
			Clients: struct {
				field.RelationField
				User struct {
					field.RelationField
					DefaultShippingAddress struct {
						field.RelationField
						User struct {
							field.RelationField
						}
					}
					DefaultBillingAddress struct {
						field.RelationField
					}
					Profile struct {
						field.RelationField
						User struct {
							field.RelationField
						}
					}
					Addresses struct {
						field.RelationField
					}
					Clients struct {
						field.RelationField
					}
					Approvals struct {
						field.RelationField
					}
				}
				Approvals struct {
					field.RelationField
				}
				Scopes struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Scopes.Approvals.Clients", "models.Client"),
				User: struct {
					field.RelationField
					DefaultShippingAddress struct {
						field.RelationField
						User struct {
							field.RelationField
						}
					}
					DefaultBillingAddress struct {
						field.RelationField
					}
					Profile struct {
						field.RelationField
						User struct {
							field.RelationField
						}
					}
					Addresses struct {
						field.RelationField
					}
					Clients struct {
						field.RelationField
					}
					Approvals struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Scopes.Approvals.Clients.User", "models.User"),
					DefaultShippingAddress: struct {
						field.RelationField
						User struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Scopes.Approvals.Clients.User.DefaultShippingAddress", "models.Address"),
						User: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Scopes.Approvals.Clients.User.DefaultShippingAddress.User", "models.User"),
						},
					},
					DefaultBillingAddress: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Scopes.Approvals.Clients.User.DefaultBillingAddress", "models.Address"),
					},
					Profile: struct {
						field.RelationField
						User struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Scopes.Approvals.Clients.User.Profile", "models.Profile"),
						User: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Scopes.Approvals.Clients.User.Profile.User", "models.User"),
						},
					},
					Addresses: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Scopes.Approvals.Clients.User.Addresses", "models.Address"),
					},
					Clients: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Scopes.Approvals.Clients.User.Clients", "models.Client"),
					},
					Approvals: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Scopes.Approvals.Clients.User.Approvals", "models.Approval"),
					},
				},
				Approvals: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Scopes.Approvals.Clients.Approvals", "models.Approval"),
				},
				Scopes: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Scopes.Approvals.Clients.Scopes", "models.Scope"),
				},
			},
			Users: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Scopes.Approvals.Users", "models.User"),
			},
		},
		Clients: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Scopes.Clients", "models.Client"),
		},
	}

	_approval.Clients = approvalManyToManyClients{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Clients", "models.Client"),
	}

	_approval.Users = approvalManyToManyUsers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Users", "models.User"),
	}

	_approval.fillFieldMap()

	return _approval
}

type approval struct {
	approvalDo

	ALL       field.Asterisk
	ID        field.Field
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	ClientID  field.Field
	UserID    field.Field
	Scopes    approvalManyToManyScopes

	Clients approvalManyToManyClients

	Users approvalManyToManyUsers

	fieldMap map[string]field.Expr
}

func (a approval) Table(newTableName string) *approval {
	a.approvalDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a approval) As(alias string) *approval {
	a.approvalDo.DO = *(a.approvalDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *approval) updateTableName(table string) *approval {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewField(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.ClientID = field.NewField(table, "client_id")
	a.UserID = field.NewField(table, "user_id")

	a.fillFieldMap()

	return a
}

func (a *approval) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *approval) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["client_id"] = a.ClientID
	a.fieldMap["user_id"] = a.UserID

}

func (a approval) clone(db *gorm.DB) approval {
	a.approvalDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a approval) replaceDB(db *gorm.DB) approval {
	a.approvalDo.ReplaceDB(db)
	return a
}

type approvalManyToManyScopes struct {
	db *gorm.DB

	field.RelationField

	Approvals struct {
		field.RelationField
		Scopes struct {
			field.RelationField
		}
		Clients struct {
			field.RelationField
			User struct {
				field.RelationField
				DefaultShippingAddress struct {
					field.RelationField
					User struct {
						field.RelationField
					}
				}
				DefaultBillingAddress struct {
					field.RelationField
				}
				Profile struct {
					field.RelationField
					User struct {
						field.RelationField
					}
				}
				Addresses struct {
					field.RelationField
				}
				Clients struct {
					field.RelationField
				}
				Approvals struct {
					field.RelationField
				}
			}
			Approvals struct {
				field.RelationField
			}
			Scopes struct {
				field.RelationField
			}
		}
		Users struct {
			field.RelationField
		}
	}
	Clients struct {
		field.RelationField
	}
}

func (a approvalManyToManyScopes) Where(conds ...field.Expr) *approvalManyToManyScopes {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a approvalManyToManyScopes) WithContext(ctx context.Context) *approvalManyToManyScopes {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a approvalManyToManyScopes) Model(m *models.Approval) *approvalManyToManyScopesTx {
	return &approvalManyToManyScopesTx{a.db.Model(m).Association(a.Name())}
}

type approvalManyToManyScopesTx struct{ tx *gorm.Association }

func (a approvalManyToManyScopesTx) Find() (result []*models.Scope, err error) {
	return result, a.tx.Find(&result)
}

func (a approvalManyToManyScopesTx) Append(values ...*models.Scope) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a approvalManyToManyScopesTx) Replace(values ...*models.Scope) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a approvalManyToManyScopesTx) Delete(values ...*models.Scope) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a approvalManyToManyScopesTx) Clear() error {
	return a.tx.Clear()
}

func (a approvalManyToManyScopesTx) Count() int64 {
	return a.tx.Count()
}

type approvalManyToManyClients struct {
	db *gorm.DB

	field.RelationField
}

func (a approvalManyToManyClients) Where(conds ...field.Expr) *approvalManyToManyClients {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a approvalManyToManyClients) WithContext(ctx context.Context) *approvalManyToManyClients {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a approvalManyToManyClients) Model(m *models.Approval) *approvalManyToManyClientsTx {
	return &approvalManyToManyClientsTx{a.db.Model(m).Association(a.Name())}
}

type approvalManyToManyClientsTx struct{ tx *gorm.Association }

func (a approvalManyToManyClientsTx) Find() (result []*models.Client, err error) {
	return result, a.tx.Find(&result)
}

func (a approvalManyToManyClientsTx) Append(values ...*models.Client) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a approvalManyToManyClientsTx) Replace(values ...*models.Client) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a approvalManyToManyClientsTx) Delete(values ...*models.Client) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a approvalManyToManyClientsTx) Clear() error {
	return a.tx.Clear()
}

func (a approvalManyToManyClientsTx) Count() int64 {
	return a.tx.Count()
}

type approvalManyToManyUsers struct {
	db *gorm.DB

	field.RelationField
}

func (a approvalManyToManyUsers) Where(conds ...field.Expr) *approvalManyToManyUsers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a approvalManyToManyUsers) WithContext(ctx context.Context) *approvalManyToManyUsers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a approvalManyToManyUsers) Model(m *models.Approval) *approvalManyToManyUsersTx {
	return &approvalManyToManyUsersTx{a.db.Model(m).Association(a.Name())}
}

type approvalManyToManyUsersTx struct{ tx *gorm.Association }

func (a approvalManyToManyUsersTx) Find() (result []*models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a approvalManyToManyUsersTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a approvalManyToManyUsersTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a approvalManyToManyUsersTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a approvalManyToManyUsersTx) Clear() error {
	return a.tx.Clear()
}

func (a approvalManyToManyUsersTx) Count() int64 {
	return a.tx.Count()
}

type approvalDo struct{ gen.DO }

type IApprovalDo interface {
	gen.SubQuery
	Debug() IApprovalDo
	WithContext(ctx context.Context) IApprovalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IApprovalDo
	WriteDB() IApprovalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IApprovalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IApprovalDo
	Not(conds ...gen.Condition) IApprovalDo
	Or(conds ...gen.Condition) IApprovalDo
	Select(conds ...field.Expr) IApprovalDo
	Where(conds ...gen.Condition) IApprovalDo
	Order(conds ...field.Expr) IApprovalDo
	Distinct(cols ...field.Expr) IApprovalDo
	Omit(cols ...field.Expr) IApprovalDo
	Join(table schema.Tabler, on ...field.Expr) IApprovalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IApprovalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IApprovalDo
	Group(cols ...field.Expr) IApprovalDo
	Having(conds ...gen.Condition) IApprovalDo
	Limit(limit int) IApprovalDo
	Offset(offset int) IApprovalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IApprovalDo
	Unscoped() IApprovalDo
	Create(values ...*models.Approval) error
	CreateInBatches(values []*models.Approval, batchSize int) error
	Save(values ...*models.Approval) error
	First() (*models.Approval, error)
	Take() (*models.Approval, error)
	Last() (*models.Approval, error)
	Find() ([]*models.Approval, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Approval, err error)
	FindInBatches(result *[]*models.Approval, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Approval) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IApprovalDo
	Assign(attrs ...field.AssignExpr) IApprovalDo
	Joins(fields ...field.RelationField) IApprovalDo
	Preload(fields ...field.RelationField) IApprovalDo
	FirstOrInit() (*models.Approval, error)
	FirstOrCreate() (*models.Approval, error)
	FindByPage(offset int, limit int) (result []*models.Approval, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IApprovalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []models.Approval, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (a approvalDo) FilterWithNameAndRole(name string, role string) (result []models.Approval, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM approvals WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB

	executeSQL = a.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result)
	err = executeSQL.Error
	return
}

func (a approvalDo) Debug() IApprovalDo {
	return a.withDO(a.DO.Debug())
}

func (a approvalDo) WithContext(ctx context.Context) IApprovalDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a approvalDo) ReadDB() IApprovalDo {
	return a.Clauses(dbresolver.Read)
}

func (a approvalDo) WriteDB() IApprovalDo {
	return a.Clauses(dbresolver.Write)
}

func (a approvalDo) Session(config *gorm.Session) IApprovalDo {
	return a.withDO(a.DO.Session(config))
}

func (a approvalDo) Clauses(conds ...clause.Expression) IApprovalDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a approvalDo) Returning(value interface{}, columns ...string) IApprovalDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a approvalDo) Not(conds ...gen.Condition) IApprovalDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a approvalDo) Or(conds ...gen.Condition) IApprovalDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a approvalDo) Select(conds ...field.Expr) IApprovalDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a approvalDo) Where(conds ...gen.Condition) IApprovalDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a approvalDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IApprovalDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a approvalDo) Order(conds ...field.Expr) IApprovalDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a approvalDo) Distinct(cols ...field.Expr) IApprovalDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a approvalDo) Omit(cols ...field.Expr) IApprovalDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a approvalDo) Join(table schema.Tabler, on ...field.Expr) IApprovalDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a approvalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IApprovalDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a approvalDo) RightJoin(table schema.Tabler, on ...field.Expr) IApprovalDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a approvalDo) Group(cols ...field.Expr) IApprovalDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a approvalDo) Having(conds ...gen.Condition) IApprovalDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a approvalDo) Limit(limit int) IApprovalDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a approvalDo) Offset(offset int) IApprovalDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a approvalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IApprovalDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a approvalDo) Unscoped() IApprovalDo {
	return a.withDO(a.DO.Unscoped())
}

func (a approvalDo) Create(values ...*models.Approval) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a approvalDo) CreateInBatches(values []*models.Approval, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a approvalDo) Save(values ...*models.Approval) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a approvalDo) First() (*models.Approval, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Approval), nil
	}
}

func (a approvalDo) Take() (*models.Approval, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Approval), nil
	}
}

func (a approvalDo) Last() (*models.Approval, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Approval), nil
	}
}

func (a approvalDo) Find() ([]*models.Approval, error) {
	result, err := a.DO.Find()
	return result.([]*models.Approval), err
}

func (a approvalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Approval, err error) {
	buf := make([]*models.Approval, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a approvalDo) FindInBatches(result *[]*models.Approval, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a approvalDo) Attrs(attrs ...field.AssignExpr) IApprovalDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a approvalDo) Assign(attrs ...field.AssignExpr) IApprovalDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a approvalDo) Joins(fields ...field.RelationField) IApprovalDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a approvalDo) Preload(fields ...field.RelationField) IApprovalDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a approvalDo) FirstOrInit() (*models.Approval, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Approval), nil
	}
}

func (a approvalDo) FirstOrCreate() (*models.Approval, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Approval), nil
	}
}

func (a approvalDo) FindByPage(offset int, limit int) (result []*models.Approval, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a approvalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a approvalDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a approvalDo) Delete(models ...*models.Approval) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *approvalDo) withDO(do gen.Dao) *approvalDo {
	a.DO = *do.(*gen.DO)
	return a
}

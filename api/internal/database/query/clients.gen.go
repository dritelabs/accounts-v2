// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dritelabs/accounts/internal/database/models"
)

func newClient(db *gorm.DB, opts ...gen.DOOption) client {
	_client := client{}

	_client.clientDo.UseDB(db, opts...)
	_client.clientDo.UseModel(&models.Client{})

	tableName := _client.clientDo.TableName()
	_client.ALL = field.NewAsterisk(tableName)
	_client.ID = field.NewField(tableName, "id")
	_client.CreatedAt = field.NewTime(tableName, "created_at")
	_client.UpdatedAt = field.NewTime(tableName, "updated_at")
	_client.DeletedAt = field.NewField(tableName, "deleted_at")
	_client.UserID = field.NewField(tableName, "user_id")
	_client.Contacts = field.NewField(tableName, "contacts")
	_client.Description = field.NewField(tableName, "description")
	_client.GrantTypes = field.NewField(tableName, "grant_types")
	_client.IsFirstParty = field.NewBool(tableName, "is_first_party")
	_client.Jwks = field.NewField(tableName, "jwks")
	_client.JwksUri = field.NewField(tableName, "jwks_uri")
	_client.LogoUri = field.NewField(tableName, "logo_uri")
	_client.Name = field.NewString(tableName, "name")
	_client.PolicyUri = field.NewField(tableName, "policy_uri")
	_client.PublicKeysConfiguration = field.NewString(tableName, "public_keys_configuration")
	_client.RedirectUris = field.NewField(tableName, "redirect_uris")
	_client.ResponseTypes = field.NewField(tableName, "response_types")
	_client.RefreshTokenRotationType = field.NewString(tableName, "refresh_token_rotation_type")
	_client.Secret = field.NewField(tableName, "secret")
	_client.SoftwareId = field.NewField(tableName, "software_id")
	_client.SoftwareVersion = field.NewField(tableName, "software_version")
	_client.TosUri = field.NewField(tableName, "tos_uri")
	_client.TokenEndpointAuthMethod = field.NewString(tableName, "token_endpoint_auth_method")
	_client.Type = field.NewString(tableName, "type")
	_client.Uri = field.NewField(tableName, "uri")
	_client.User = clientBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "models.User"),
		DefaultShippingAddress: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.DefaultShippingAddress", "models.Address"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.DefaultShippingAddress.User", "models.User"),
			},
		},
		DefaultBillingAddress: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.DefaultBillingAddress", "models.Address"),
		},
		Profile: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Profile", "models.Profile"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Profile.User", "models.User"),
			},
		},
		Addresses: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.Addresses", "models.Address"),
		},
		Clients: struct {
			field.RelationField
			User struct {
				field.RelationField
			}
			Approvals struct {
				field.RelationField
				Scopes struct {
					field.RelationField
					Approvals struct {
						field.RelationField
					}
					Clients struct {
						field.RelationField
					}
				}
				Clients struct {
					field.RelationField
				}
				Users struct {
					field.RelationField
				}
			}
			Scopes struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("User.Clients", "models.Client"),
			User: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Clients.User", "models.User"),
			},
			Approvals: struct {
				field.RelationField
				Scopes struct {
					field.RelationField
					Approvals struct {
						field.RelationField
					}
					Clients struct {
						field.RelationField
					}
				}
				Clients struct {
					field.RelationField
				}
				Users struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("User.Clients.Approvals", "models.Approval"),
				Scopes: struct {
					field.RelationField
					Approvals struct {
						field.RelationField
					}
					Clients struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("User.Clients.Approvals.Scopes", "models.Scope"),
					Approvals: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("User.Clients.Approvals.Scopes.Approvals", "models.Approval"),
					},
					Clients: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("User.Clients.Approvals.Scopes.Clients", "models.Client"),
					},
				},
				Clients: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.Clients.Approvals.Clients", "models.Client"),
				},
				Users: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("User.Clients.Approvals.Users", "models.User"),
				},
			},
			Scopes: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("User.Clients.Scopes", "models.Scope"),
			},
		},
		Approvals: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("User.Approvals", "models.Approval"),
		},
	}

	_client.Approvals = clientManyToManyApprovals{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Approvals", "models.Approval"),
	}

	_client.Scopes = clientManyToManyScopes{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Scopes", "models.Scope"),
	}

	_client.fillFieldMap()

	return _client
}

type client struct {
	clientDo

	ALL                      field.Asterisk
	ID                       field.Field
	CreatedAt                field.Time
	UpdatedAt                field.Time
	DeletedAt                field.Field
	UserID                   field.Field
	Contacts                 field.Field
	Description              field.Field
	GrantTypes               field.Field
	IsFirstParty             field.Bool
	Jwks                     field.Field
	JwksUri                  field.Field
	LogoUri                  field.Field
	Name                     field.String
	PolicyUri                field.Field
	PublicKeysConfiguration  field.String
	RedirectUris             field.Field
	ResponseTypes            field.Field
	RefreshTokenRotationType field.String
	Secret                   field.Field
	SoftwareId               field.Field
	SoftwareVersion          field.Field
	TosUri                   field.Field
	TokenEndpointAuthMethod  field.String
	Type                     field.String
	Uri                      field.Field
	User                     clientBelongsToUser

	Approvals clientManyToManyApprovals

	Scopes clientManyToManyScopes

	fieldMap map[string]field.Expr
}

func (c client) Table(newTableName string) *client {
	c.clientDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c client) As(alias string) *client {
	c.clientDo.DO = *(c.clientDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *client) updateTableName(table string) *client {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewField(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.UserID = field.NewField(table, "user_id")
	c.Contacts = field.NewField(table, "contacts")
	c.Description = field.NewField(table, "description")
	c.GrantTypes = field.NewField(table, "grant_types")
	c.IsFirstParty = field.NewBool(table, "is_first_party")
	c.Jwks = field.NewField(table, "jwks")
	c.JwksUri = field.NewField(table, "jwks_uri")
	c.LogoUri = field.NewField(table, "logo_uri")
	c.Name = field.NewString(table, "name")
	c.PolicyUri = field.NewField(table, "policy_uri")
	c.PublicKeysConfiguration = field.NewString(table, "public_keys_configuration")
	c.RedirectUris = field.NewField(table, "redirect_uris")
	c.ResponseTypes = field.NewField(table, "response_types")
	c.RefreshTokenRotationType = field.NewString(table, "refresh_token_rotation_type")
	c.Secret = field.NewField(table, "secret")
	c.SoftwareId = field.NewField(table, "software_id")
	c.SoftwareVersion = field.NewField(table, "software_version")
	c.TosUri = field.NewField(table, "tos_uri")
	c.TokenEndpointAuthMethod = field.NewString(table, "token_endpoint_auth_method")
	c.Type = field.NewString(table, "type")
	c.Uri = field.NewField(table, "uri")

	c.fillFieldMap()

	return c
}

func (c *client) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *client) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 28)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["contacts"] = c.Contacts
	c.fieldMap["description"] = c.Description
	c.fieldMap["grant_types"] = c.GrantTypes
	c.fieldMap["is_first_party"] = c.IsFirstParty
	c.fieldMap["jwks"] = c.Jwks
	c.fieldMap["jwks_uri"] = c.JwksUri
	c.fieldMap["logo_uri"] = c.LogoUri
	c.fieldMap["name"] = c.Name
	c.fieldMap["policy_uri"] = c.PolicyUri
	c.fieldMap["public_keys_configuration"] = c.PublicKeysConfiguration
	c.fieldMap["redirect_uris"] = c.RedirectUris
	c.fieldMap["response_types"] = c.ResponseTypes
	c.fieldMap["refresh_token_rotation_type"] = c.RefreshTokenRotationType
	c.fieldMap["secret"] = c.Secret
	c.fieldMap["software_id"] = c.SoftwareId
	c.fieldMap["software_version"] = c.SoftwareVersion
	c.fieldMap["tos_uri"] = c.TosUri
	c.fieldMap["token_endpoint_auth_method"] = c.TokenEndpointAuthMethod
	c.fieldMap["type"] = c.Type
	c.fieldMap["uri"] = c.Uri

}

func (c client) clone(db *gorm.DB) client {
	c.clientDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c client) replaceDB(db *gorm.DB) client {
	c.clientDo.ReplaceDB(db)
	return c
}

type clientBelongsToUser struct {
	db *gorm.DB

	field.RelationField

	DefaultShippingAddress struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	DefaultBillingAddress struct {
		field.RelationField
	}
	Profile struct {
		field.RelationField
		User struct {
			field.RelationField
		}
	}
	Addresses struct {
		field.RelationField
	}
	Clients struct {
		field.RelationField
		User struct {
			field.RelationField
		}
		Approvals struct {
			field.RelationField
			Scopes struct {
				field.RelationField
				Approvals struct {
					field.RelationField
				}
				Clients struct {
					field.RelationField
				}
			}
			Clients struct {
				field.RelationField
			}
			Users struct {
				field.RelationField
			}
		}
		Scopes struct {
			field.RelationField
		}
	}
	Approvals struct {
		field.RelationField
	}
}

func (a clientBelongsToUser) Where(conds ...field.Expr) *clientBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a clientBelongsToUser) WithContext(ctx context.Context) *clientBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a clientBelongsToUser) Model(m *models.Client) *clientBelongsToUserTx {
	return &clientBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

type clientBelongsToUserTx struct{ tx *gorm.Association }

func (a clientBelongsToUserTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a clientBelongsToUserTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a clientBelongsToUserTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a clientBelongsToUserTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a clientBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a clientBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

type clientManyToManyApprovals struct {
	db *gorm.DB

	field.RelationField
}

func (a clientManyToManyApprovals) Where(conds ...field.Expr) *clientManyToManyApprovals {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a clientManyToManyApprovals) WithContext(ctx context.Context) *clientManyToManyApprovals {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a clientManyToManyApprovals) Model(m *models.Client) *clientManyToManyApprovalsTx {
	return &clientManyToManyApprovalsTx{a.db.Model(m).Association(a.Name())}
}

type clientManyToManyApprovalsTx struct{ tx *gorm.Association }

func (a clientManyToManyApprovalsTx) Find() (result []*models.Approval, err error) {
	return result, a.tx.Find(&result)
}

func (a clientManyToManyApprovalsTx) Append(values ...*models.Approval) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a clientManyToManyApprovalsTx) Replace(values ...*models.Approval) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a clientManyToManyApprovalsTx) Delete(values ...*models.Approval) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a clientManyToManyApprovalsTx) Clear() error {
	return a.tx.Clear()
}

func (a clientManyToManyApprovalsTx) Count() int64 {
	return a.tx.Count()
}

type clientManyToManyScopes struct {
	db *gorm.DB

	field.RelationField
}

func (a clientManyToManyScopes) Where(conds ...field.Expr) *clientManyToManyScopes {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a clientManyToManyScopes) WithContext(ctx context.Context) *clientManyToManyScopes {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a clientManyToManyScopes) Model(m *models.Client) *clientManyToManyScopesTx {
	return &clientManyToManyScopesTx{a.db.Model(m).Association(a.Name())}
}

type clientManyToManyScopesTx struct{ tx *gorm.Association }

func (a clientManyToManyScopesTx) Find() (result []*models.Scope, err error) {
	return result, a.tx.Find(&result)
}

func (a clientManyToManyScopesTx) Append(values ...*models.Scope) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a clientManyToManyScopesTx) Replace(values ...*models.Scope) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a clientManyToManyScopesTx) Delete(values ...*models.Scope) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a clientManyToManyScopesTx) Clear() error {
	return a.tx.Clear()
}

func (a clientManyToManyScopesTx) Count() int64 {
	return a.tx.Count()
}

type clientDo struct{ gen.DO }

type IClientDo interface {
	gen.SubQuery
	Debug() IClientDo
	WithContext(ctx context.Context) IClientDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClientDo
	WriteDB() IClientDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClientDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClientDo
	Not(conds ...gen.Condition) IClientDo
	Or(conds ...gen.Condition) IClientDo
	Select(conds ...field.Expr) IClientDo
	Where(conds ...gen.Condition) IClientDo
	Order(conds ...field.Expr) IClientDo
	Distinct(cols ...field.Expr) IClientDo
	Omit(cols ...field.Expr) IClientDo
	Join(table schema.Tabler, on ...field.Expr) IClientDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClientDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClientDo
	Group(cols ...field.Expr) IClientDo
	Having(conds ...gen.Condition) IClientDo
	Limit(limit int) IClientDo
	Offset(offset int) IClientDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClientDo
	Unscoped() IClientDo
	Create(values ...*models.Client) error
	CreateInBatches(values []*models.Client, batchSize int) error
	Save(values ...*models.Client) error
	First() (*models.Client, error)
	Take() (*models.Client, error)
	Last() (*models.Client, error)
	Find() ([]*models.Client, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Client, err error)
	FindInBatches(result *[]*models.Client, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Client) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClientDo
	Assign(attrs ...field.AssignExpr) IClientDo
	Joins(fields ...field.RelationField) IClientDo
	Preload(fields ...field.RelationField) IClientDo
	FirstOrInit() (*models.Client, error)
	FirstOrCreate() (*models.Client, error)
	FindByPage(offset int, limit int) (result []*models.Client, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClientDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []models.Client, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (c clientDo) FilterWithNameAndRole(name string, role string) (result []models.Client, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM clients WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB

	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result)
	err = executeSQL.Error
	return
}

func (c clientDo) Debug() IClientDo {
	return c.withDO(c.DO.Debug())
}

func (c clientDo) WithContext(ctx context.Context) IClientDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clientDo) ReadDB() IClientDo {
	return c.Clauses(dbresolver.Read)
}

func (c clientDo) WriteDB() IClientDo {
	return c.Clauses(dbresolver.Write)
}

func (c clientDo) Session(config *gorm.Session) IClientDo {
	return c.withDO(c.DO.Session(config))
}

func (c clientDo) Clauses(conds ...clause.Expression) IClientDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clientDo) Returning(value interface{}, columns ...string) IClientDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clientDo) Not(conds ...gen.Condition) IClientDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clientDo) Or(conds ...gen.Condition) IClientDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clientDo) Select(conds ...field.Expr) IClientDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clientDo) Where(conds ...gen.Condition) IClientDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clientDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IClientDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c clientDo) Order(conds ...field.Expr) IClientDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clientDo) Distinct(cols ...field.Expr) IClientDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clientDo) Omit(cols ...field.Expr) IClientDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clientDo) Join(table schema.Tabler, on ...field.Expr) IClientDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clientDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClientDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clientDo) RightJoin(table schema.Tabler, on ...field.Expr) IClientDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clientDo) Group(cols ...field.Expr) IClientDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clientDo) Having(conds ...gen.Condition) IClientDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clientDo) Limit(limit int) IClientDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clientDo) Offset(offset int) IClientDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clientDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClientDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clientDo) Unscoped() IClientDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clientDo) Create(values ...*models.Client) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clientDo) CreateInBatches(values []*models.Client, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clientDo) Save(values ...*models.Client) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clientDo) First() (*models.Client, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Client), nil
	}
}

func (c clientDo) Take() (*models.Client, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Client), nil
	}
}

func (c clientDo) Last() (*models.Client, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Client), nil
	}
}

func (c clientDo) Find() ([]*models.Client, error) {
	result, err := c.DO.Find()
	return result.([]*models.Client), err
}

func (c clientDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Client, err error) {
	buf := make([]*models.Client, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clientDo) FindInBatches(result *[]*models.Client, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clientDo) Attrs(attrs ...field.AssignExpr) IClientDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clientDo) Assign(attrs ...field.AssignExpr) IClientDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clientDo) Joins(fields ...field.RelationField) IClientDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clientDo) Preload(fields ...field.RelationField) IClientDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clientDo) FirstOrInit() (*models.Client, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Client), nil
	}
}

func (c clientDo) FirstOrCreate() (*models.Client, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Client), nil
	}
}

func (c clientDo) FindByPage(offset int, limit int) (result []*models.Client, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clientDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clientDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c clientDo) Delete(models ...*models.Client) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *clientDo) withDO(do gen.Dao) *clientDo {
	c.DO = *do.(*gen.DO)
	return c
}

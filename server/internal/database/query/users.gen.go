// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dritelabs/accounts/internal/database/models"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&models.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewField(tableName, "id")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.DeletedAt = field.NewField(tableName, "deleted_at")
	_user.DefaultShippingAddressID = field.NewField(tableName, "default_shipping_address_id")
	_user.DefaultBillingAddressID = field.NewField(tableName, "default_billing_address_id")
	_user.Email = field.NewString(tableName, "email")
	_user.EmailVerified = field.NewBool(tableName, "email_verified")
	_user.Password = field.NewString(tableName, "password")
	_user.PhoneNumber = field.NewString(tableName, "phone_number")
	_user.PhoneNumberVerified = field.NewBool(tableName, "phone_number_verified")
	_user.Username = field.NewString(tableName, "username")
	_user.Profile = userHasOneProfile{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Profile", "models.Profile"),
		User: struct {
			field.RelationField
			DefaultShippingAddress struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}
			DefaultBillingAddress struct {
				field.RelationField
			}
			Profile struct {
				field.RelationField
			}
			Addresses struct {
				field.RelationField
			}
			Clients struct {
				field.RelationField
				User struct {
					field.RelationField
				}
				Approvals struct {
					field.RelationField
					Scopes struct {
						field.RelationField
						Approvals struct {
							field.RelationField
						}
						Clients struct {
							field.RelationField
						}
					}
					Clients struct {
						field.RelationField
					}
					Users struct {
						field.RelationField
					}
				}
				Scopes struct {
					field.RelationField
				}
			}
			Approvals struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Profile.User", "models.User"),
			DefaultShippingAddress: struct {
				field.RelationField
				User struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Profile.User.DefaultShippingAddress", "models.Address"),
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Profile.User.DefaultShippingAddress.User", "models.User"),
				},
			},
			DefaultBillingAddress: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Profile.User.DefaultBillingAddress", "models.Address"),
			},
			Profile: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Profile.User.Profile", "models.Profile"),
			},
			Addresses: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Profile.User.Addresses", "models.Address"),
			},
			Clients: struct {
				field.RelationField
				User struct {
					field.RelationField
				}
				Approvals struct {
					field.RelationField
					Scopes struct {
						field.RelationField
						Approvals struct {
							field.RelationField
						}
						Clients struct {
							field.RelationField
						}
					}
					Clients struct {
						field.RelationField
					}
					Users struct {
						field.RelationField
					}
				}
				Scopes struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Profile.User.Clients", "models.Client"),
				User: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Profile.User.Clients.User", "models.User"),
				},
				Approvals: struct {
					field.RelationField
					Scopes struct {
						field.RelationField
						Approvals struct {
							field.RelationField
						}
						Clients struct {
							field.RelationField
						}
					}
					Clients struct {
						field.RelationField
					}
					Users struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Profile.User.Clients.Approvals", "models.Approval"),
					Scopes: struct {
						field.RelationField
						Approvals struct {
							field.RelationField
						}
						Clients struct {
							field.RelationField
						}
					}{
						RelationField: field.NewRelation("Profile.User.Clients.Approvals.Scopes", "models.Scope"),
						Approvals: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Profile.User.Clients.Approvals.Scopes.Approvals", "models.Approval"),
						},
						Clients: struct {
							field.RelationField
						}{
							RelationField: field.NewRelation("Profile.User.Clients.Approvals.Scopes.Clients", "models.Client"),
						},
					},
					Clients: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Profile.User.Clients.Approvals.Clients", "models.Client"),
					},
					Users: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Profile.User.Clients.Approvals.Users", "models.User"),
					},
				},
				Scopes: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Profile.User.Clients.Scopes", "models.Scope"),
				},
			},
			Approvals: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Profile.User.Approvals", "models.Approval"),
			},
		},
	}

	_user.Addresses = userHasManyAddresses{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Addresses", "models.Address"),
	}

	_user.Clients = userHasManyClients{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Clients", "models.Client"),
	}

	_user.DefaultShippingAddress = userBelongsToDefaultShippingAddress{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("DefaultShippingAddress", "models.Address"),
	}

	_user.DefaultBillingAddress = userBelongsToDefaultBillingAddress{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("DefaultBillingAddress", "models.Address"),
	}

	_user.Approvals = userManyToManyApprovals{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Approvals", "models.Approval"),
	}

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo

	ALL                      field.Asterisk
	ID                       field.Field
	CreatedAt                field.Time
	UpdatedAt                field.Time
	DeletedAt                field.Field
	DefaultShippingAddressID field.Field
	DefaultBillingAddressID  field.Field
	Email                    field.String
	EmailVerified            field.Bool
	Password                 field.String
	PhoneNumber              field.String
	PhoneNumberVerified      field.Bool
	Username                 field.String
	Profile                  userHasOneProfile

	Addresses userHasManyAddresses

	Clients userHasManyClients

	DefaultShippingAddress userBelongsToDefaultShippingAddress

	DefaultBillingAddress userBelongsToDefaultBillingAddress

	Approvals userManyToManyApprovals

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewField(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.DefaultShippingAddressID = field.NewField(table, "default_shipping_address_id")
	u.DefaultBillingAddressID = field.NewField(table, "default_billing_address_id")
	u.Email = field.NewString(table, "email")
	u.EmailVerified = field.NewBool(table, "email_verified")
	u.Password = field.NewString(table, "password")
	u.PhoneNumber = field.NewString(table, "phone_number")
	u.PhoneNumberVerified = field.NewBool(table, "phone_number_verified")
	u.Username = field.NewString(table, "username")

	u.fillFieldMap()

	return u
}

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 18)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["default_shipping_address_id"] = u.DefaultShippingAddressID
	u.fieldMap["default_billing_address_id"] = u.DefaultBillingAddressID
	u.fieldMap["email"] = u.Email
	u.fieldMap["email_verified"] = u.EmailVerified
	u.fieldMap["password"] = u.Password
	u.fieldMap["phone_number"] = u.PhoneNumber
	u.fieldMap["phone_number_verified"] = u.PhoneNumberVerified
	u.fieldMap["username"] = u.Username

}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userHasOneProfile struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		DefaultShippingAddress struct {
			field.RelationField
			User struct {
				field.RelationField
			}
		}
		DefaultBillingAddress struct {
			field.RelationField
		}
		Profile struct {
			field.RelationField
		}
		Addresses struct {
			field.RelationField
		}
		Clients struct {
			field.RelationField
			User struct {
				field.RelationField
			}
			Approvals struct {
				field.RelationField
				Scopes struct {
					field.RelationField
					Approvals struct {
						field.RelationField
					}
					Clients struct {
						field.RelationField
					}
				}
				Clients struct {
					field.RelationField
				}
				Users struct {
					field.RelationField
				}
			}
			Scopes struct {
				field.RelationField
			}
		}
		Approvals struct {
			field.RelationField
		}
	}
}

func (a userHasOneProfile) Where(conds ...field.Expr) *userHasOneProfile {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasOneProfile) WithContext(ctx context.Context) *userHasOneProfile {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasOneProfile) Model(m *models.User) *userHasOneProfileTx {
	return &userHasOneProfileTx{a.db.Model(m).Association(a.Name())}
}

type userHasOneProfileTx struct{ tx *gorm.Association }

func (a userHasOneProfileTx) Find() (result *models.Profile, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasOneProfileTx) Append(values ...*models.Profile) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasOneProfileTx) Replace(values ...*models.Profile) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasOneProfileTx) Delete(values ...*models.Profile) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasOneProfileTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasOneProfileTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyAddresses struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyAddresses) Where(conds ...field.Expr) *userHasManyAddresses {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyAddresses) WithContext(ctx context.Context) *userHasManyAddresses {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyAddresses) Model(m *models.User) *userHasManyAddressesTx {
	return &userHasManyAddressesTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyAddressesTx struct{ tx *gorm.Association }

func (a userHasManyAddressesTx) Find() (result []*models.Address, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyAddressesTx) Append(values ...*models.Address) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyAddressesTx) Replace(values ...*models.Address) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyAddressesTx) Delete(values ...*models.Address) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyAddressesTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyAddressesTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyClients struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyClients) Where(conds ...field.Expr) *userHasManyClients {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyClients) WithContext(ctx context.Context) *userHasManyClients {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyClients) Model(m *models.User) *userHasManyClientsTx {
	return &userHasManyClientsTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyClientsTx struct{ tx *gorm.Association }

func (a userHasManyClientsTx) Find() (result []*models.Client, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyClientsTx) Append(values ...*models.Client) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyClientsTx) Replace(values ...*models.Client) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyClientsTx) Delete(values ...*models.Client) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyClientsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyClientsTx) Count() int64 {
	return a.tx.Count()
}

type userBelongsToDefaultShippingAddress struct {
	db *gorm.DB

	field.RelationField
}

func (a userBelongsToDefaultShippingAddress) Where(conds ...field.Expr) *userBelongsToDefaultShippingAddress {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userBelongsToDefaultShippingAddress) WithContext(ctx context.Context) *userBelongsToDefaultShippingAddress {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userBelongsToDefaultShippingAddress) Model(m *models.User) *userBelongsToDefaultShippingAddressTx {
	return &userBelongsToDefaultShippingAddressTx{a.db.Model(m).Association(a.Name())}
}

type userBelongsToDefaultShippingAddressTx struct{ tx *gorm.Association }

func (a userBelongsToDefaultShippingAddressTx) Find() (result *models.Address, err error) {
	return result, a.tx.Find(&result)
}

func (a userBelongsToDefaultShippingAddressTx) Append(values ...*models.Address) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userBelongsToDefaultShippingAddressTx) Replace(values ...*models.Address) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userBelongsToDefaultShippingAddressTx) Delete(values ...*models.Address) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userBelongsToDefaultShippingAddressTx) Clear() error {
	return a.tx.Clear()
}

func (a userBelongsToDefaultShippingAddressTx) Count() int64 {
	return a.tx.Count()
}

type userBelongsToDefaultBillingAddress struct {
	db *gorm.DB

	field.RelationField
}

func (a userBelongsToDefaultBillingAddress) Where(conds ...field.Expr) *userBelongsToDefaultBillingAddress {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userBelongsToDefaultBillingAddress) WithContext(ctx context.Context) *userBelongsToDefaultBillingAddress {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userBelongsToDefaultBillingAddress) Model(m *models.User) *userBelongsToDefaultBillingAddressTx {
	return &userBelongsToDefaultBillingAddressTx{a.db.Model(m).Association(a.Name())}
}

type userBelongsToDefaultBillingAddressTx struct{ tx *gorm.Association }

func (a userBelongsToDefaultBillingAddressTx) Find() (result *models.Address, err error) {
	return result, a.tx.Find(&result)
}

func (a userBelongsToDefaultBillingAddressTx) Append(values ...*models.Address) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userBelongsToDefaultBillingAddressTx) Replace(values ...*models.Address) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userBelongsToDefaultBillingAddressTx) Delete(values ...*models.Address) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userBelongsToDefaultBillingAddressTx) Clear() error {
	return a.tx.Clear()
}

func (a userBelongsToDefaultBillingAddressTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyApprovals struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyApprovals) Where(conds ...field.Expr) *userManyToManyApprovals {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyApprovals) WithContext(ctx context.Context) *userManyToManyApprovals {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyApprovals) Model(m *models.User) *userManyToManyApprovalsTx {
	return &userManyToManyApprovalsTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyApprovalsTx struct{ tx *gorm.Association }

func (a userManyToManyApprovalsTx) Find() (result []*models.Approval, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyApprovalsTx) Append(values ...*models.Approval) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyApprovalsTx) Replace(values ...*models.Approval) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyApprovalsTx) Delete(values ...*models.Approval) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyApprovalsTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyApprovalsTx) Count() int64 {
	return a.tx.Count()
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*models.User) error
	CreateInBatches(values []*models.User, batchSize int) error
	Save(values ...*models.User) error
	First() (*models.User, error)
	Take() (*models.User, error)
	Last() (*models.User, error)
	Find() ([]*models.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.User, err error)
	FindInBatches(result *[]*models.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*models.User, error)
	FirstOrCreate() (*models.User, error)
	FindByPage(offset int, limit int) (result []*models.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []models.User, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (u userDo) FilterWithNameAndRole(name string, role string) (result []models.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM users WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB

	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result)
	err = executeSQL.Error
	return
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*models.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*models.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*models.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*models.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.User), nil
	}
}

func (u userDo) Take() (*models.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.User), nil
	}
}

func (u userDo) Last() (*models.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.User), nil
	}
}

func (u userDo) Find() ([]*models.User, error) {
	result, err := u.DO.Find()
	return result.([]*models.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.User, err error) {
	buf := make([]*models.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*models.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*models.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.User), nil
	}
}

func (u userDo) FirstOrCreate() (*models.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*models.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*models.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}

// Code generated by ent, DO NOT EDIT.

package profile

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the profile type in the database.
	Label = "profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldGivenName holds the string denoting the given_name field in the database.
	FieldGivenName = "given_name"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// FieldMiddleName holds the string denoting the middle_name field in the database.
	FieldMiddleName = "middle_name"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldProfile holds the string denoting the profile field in the database.
	FieldProfile = "profile"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldWebsite holds the string denoting the website field in the database.
	FieldWebsite = "website"
	// FieldZoneInfo holds the string denoting the zone_info field in the database.
	FieldZoneInfo = "zone_info"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the profile in the database.
	Table = "profiles"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "profiles"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_profile"
)

// Columns holds all SQL columns for profile fields.
var Columns = []string{
	FieldID,
	FieldBirthDate,
	FieldGivenName,
	FieldGender,
	FieldLocale,
	FieldMiddleName,
	FieldNickname,
	FieldProfile,
	FieldPicture,
	FieldWebsite,
	FieldZoneInfo,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "profiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_profile",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Gender defines the type for the "gender" enum field.
type Gender string

// Gender values.
const (
	GenderUnspecified Gender = "unspecified"
	GenderMale        Gender = "male"
	GenderFemale      Gender = "female"
)

func (ge Gender) String() string {
	return string(ge)
}

// GenderValidator is a validator for the "gender" field enum values. It is called by the builders before save.
func GenderValidator(ge Gender) error {
	switch ge {
	case GenderUnspecified, GenderMale, GenderFemale:
		return nil
	default:
		return fmt.Errorf("profile: invalid enum value for gender field: %q", ge)
	}
}

// Order defines the ordering method for the Profile queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByGivenName orders the results by the given_name field.
func ByGivenName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldGivenName, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// ByMiddleName orders the results by the middle_name field.
func ByMiddleName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldMiddleName, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByProfile orders the results by the profile field.
func ByProfile(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldProfile, opts...).ToFunc()
}

// ByPicture orders the results by the picture field.
func ByPicture(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPicture, opts...).ToFunc()
}

// ByWebsite orders the results by the website field.
func ByWebsite(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldWebsite, opts...).ToFunc()
}

// ByZoneInfo orders the results by the zone_info field.
func ByZoneInfo(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldZoneInfo, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
	)
}

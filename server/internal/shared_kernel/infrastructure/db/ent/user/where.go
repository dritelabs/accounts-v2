// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dritelabs/accounts/internal/shared_kernel/infrastructure/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// DefaultShippingAddressID applies equality check predicate on the "default_shipping_address_id" field. It's identical to DefaultShippingAddressIDEQ.
func DefaultShippingAddressID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDefaultShippingAddressID, v))
}

// DefaultBillingAddressID applies equality check predicate on the "default_billing_address_id" field. It's identical to DefaultBillingAddressIDEQ.
func DefaultBillingAddressID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDefaultBillingAddressID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailVerified applies equality check predicate on the "email_verified" field. It's identical to EmailVerifiedEQ.
func EmailVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberVerified applies equality check predicate on the "phone_number_verified" field. It's identical to PhoneNumberVerifiedEQ.
func PhoneNumberVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumberVerified, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// DefaultShippingAddressIDEQ applies the EQ predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDNEQ applies the NEQ predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDIn applies the In predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDefaultShippingAddressID, vs...))
}

// DefaultShippingAddressIDNotIn applies the NotIn predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDefaultShippingAddressID, vs...))
}

// DefaultShippingAddressIDGT applies the GT predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDGTE applies the GTE predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDLT applies the LT predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDLTE applies the LTE predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDContains applies the Contains predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDHasPrefix applies the HasPrefix predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDHasSuffix applies the HasSuffix predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDEqualFold applies the EqualFold predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDefaultShippingAddressID, v))
}

// DefaultShippingAddressIDContainsFold applies the ContainsFold predicate on the "default_shipping_address_id" field.
func DefaultShippingAddressIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDefaultShippingAddressID, v))
}

// DefaultBillingAddressIDEQ applies the EQ predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDNEQ applies the NEQ predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDIn applies the In predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDefaultBillingAddressID, vs...))
}

// DefaultBillingAddressIDNotIn applies the NotIn predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDefaultBillingAddressID, vs...))
}

// DefaultBillingAddressIDGT applies the GT predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDGTE applies the GTE predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDLT applies the LT predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDLTE applies the LTE predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDContains applies the Contains predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDHasPrefix applies the HasPrefix predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDHasSuffix applies the HasSuffix predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDEqualFold applies the EqualFold predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDefaultBillingAddressID, v))
}

// DefaultBillingAddressIDContainsFold applies the ContainsFold predicate on the "default_billing_address_id" field.
func DefaultBillingAddressIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDefaultBillingAddressID, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// EmailVerifiedEQ applies the EQ predicate on the "email_verified" field.
func EmailVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// EmailVerifiedNEQ applies the NEQ predicate on the "email_verified" field.
func EmailVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailVerified, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// PhoneNumberVerifiedEQ applies the EQ predicate on the "phone_number_verified" field.
func PhoneNumberVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhoneNumberVerified, v))
}

// PhoneNumberVerifiedNEQ applies the NEQ predicate on the "phone_number_verified" field.
func PhoneNumberVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhoneNumberVerified, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDefaultShippingAddressID holds the string denoting the default_shipping_address_id field in the database.
	FieldDefaultShippingAddressID = "default_shipping_address_id"
	// FieldDefaultBillingAddressID holds the string denoting the default_billing_address_id field in the database.
	FieldDefaultBillingAddressID = "default_billing_address_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldEmailVerified holds the string denoting the email_verified field in the database.
	FieldEmailVerified = "email_verified"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldPhoneNumberVerified holds the string denoting the phone_number_verified field in the database.
	FieldPhoneNumberVerified = "phone_number_verified"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "profiles"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "user_profile"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldDefaultShippingAddressID,
	FieldDefaultBillingAddressID,
	FieldEmail,
	FieldEmailVerified,
	FieldPassword,
	FieldPhoneNumber,
	FieldPhoneNumberVerified,
	FieldUsername,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Order defines the ordering method for the User queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDefaultShippingAddressID orders the results by the default_shipping_address_id field.
func ByDefaultShippingAddressID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDefaultShippingAddressID, opts...).ToFunc()
}

// ByDefaultBillingAddressID orders the results by the default_billing_address_id field.
func ByDefaultBillingAddressID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldDefaultBillingAddressID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByEmailVerified orders the results by the email_verified field.
func ByEmailVerified(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldEmailVerified, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByPhoneNumberVerified orders the results by the phone_number_verified field.
func ByPhoneNumberVerified(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldPhoneNumberVerified, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ProfileTable, ProfileColumn),
	)
}
